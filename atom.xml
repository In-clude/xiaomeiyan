<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://in-clude.github.io/xiaomeiyan/</id>
    <title>黑岩</title>
    <updated>2021-06-14T05:32:08.317Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://in-clude.github.io/xiaomeiyan/"/>
    <link rel="self" href="https://in-clude.github.io/xiaomeiyan/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://in-clude.github.io/xiaomeiyan/images/avatar.png</logo>
    <icon>https://in-clude.github.io/xiaomeiyan/favicon.ico</icon>
    <rights>All rights reserved 2021, 黑岩</rights>
    <entry>
        <title type="html"><![CDATA[Gitee+PicGo图床搭建笔记]]></title>
        <id>https://in-clude.github.io/xiaomeiyan/post/giteepicgo-tu-chuang-da-jian-bi-ji/</id>
        <link href="https://in-clude.github.io/xiaomeiyan/post/giteepicgo-tu-chuang-da-jian-bi-ji/">
        </link>
        <updated>2021-05-23T03:48:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="软件安装"><strong>软件安装</strong></h2>
<p>图库上传管理软件：<strong>PicGo</strong></p>
<p>包括picgo-plugin-gitee-uploader插件</p>
<p>MarkDown编辑软件：<strong>Typora</strong></p>
<h2 id="picgo安装"><strong>PicGo安装</strong></h2>
<h3 id="安装后界面如下"><strong>安装后界面如下</strong>：</h3>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kzcy/pic/raw/master/img/82714.png" alt="" loading="lazy"></figure>
<h3 id="插件安装"><strong>插件安装</strong></h3>
<p>选择最底下的插件设置，搜索gitee，安装第二个插件gitee-uploader1.xxx。</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/kzcy/pic/raw/master/img/82708.png" alt="" loading="lazy"></figure>
<hr>
<p>** 这里注意一下，必须要先安装node.js才能安装插件。**</p>
<hr>
<h2 id="建立码云仓库">建立<a href="https://gitee.com/">码云</a>仓库</h2>
<h3 id="新建仓库">新建仓库</h3>
<p>点击右上角的<code>+</code>号，<code>新建仓库</code>。</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kzcy/pic/raw/master/img/82706.png" alt="新建仓库" loading="lazy"></figure>
<p><strong>新建仓库的要点如下：</strong></p>
<ol>
<li>
<p>输入一个仓库名称；</p>
</li>
<li>
<p>其次将仓库设为公开；</p>
</li>
<li>
<p>勾选使用Readme文件初始化这个仓库。</p>
</li>
</ol>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/kzcy/pic/raw/master/img/82701.png" alt="" loading="lazy"></figure>
<p>点击创建即完成仓库创建。</p>
<h3 id="获取token">获取token</h3>
<p>登录码云账号，点击头像进入<code>设置</code>，找到<code>私人令牌</code>，点击<code>生成新令牌</code>，把<code>projects</code>这一项勾上，其他的不用勾，然后<code>提交</code>。</p>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/kzcy/pic/raw/master/img/82709.png" alt="私人令牌" loading="lazy"></figure>
<p>验证密码之后会出来一串数字，这一串数字就是你的<code>token</code><strong>（不能泄露，否者别人也可以操作你的数据）</strong>，后面设置会用到。</p>
<p>注意：这个令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，直接复制进去，搞丢了又要重新生成一个。</p>
<h2 id="picgo调教">PicGo调教</h2>
<h3 id="插件配置">插件配置</h3>
<p>选择<code>图库设置</code>里的<code>gitee</code>选项  <strong>（没有安装插件前，没有此选项）</strong>。</p>
<p><strong>配置要点：</strong></p>
<ul>
<li>
<p><strong>repo</strong>：用户名/仓库名称 <em>（仓库地址后面那一段）；</em></p>
</li>
<li>
<p><strong>branch</strong>：分支，填写master；</p>
</li>
<li>
<p><strong>token</strong>：填入前面获取的<code>私人令牌</code>；</p>
</li>
<li>
<p><strong>path</strong>：路径，一般填写img；</p>
</li>
<li>
<p><strong>customPath</strong>：提交消息，可不填；</p>
</li>
<li>
<p><strong>customURL</strong>：自定义地址，可不填。</p>
</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/kzcy/pic/raw/master/img/image-20200827165059954.png" alt="" loading="lazy"></figure>
<h3 id="测试"><strong>测试</strong></h3>
<p>随便选一张图片上传，上传之后默认复制链接到粘贴板。</p>
<h2 id="picgotypora">PicGo+Typora</h2>
<p>MarkDown写作软件很多，但是Typora是兼具功能与颜值的软件之一（也可能是唯一），而且支持实时预览。</p>
<p><strong>PicGo+Typora</strong>支持图片<code>拖曳/粘贴</code>上传到服务器，解决了MarkDown写作图片插入的难题，非常实用。</p>
<p>配置上，打开Typora<code>设置</code>，在<code>图像</code>便签，按照下面设置即可：</p>
<figure data-type="image" tabindex="7"><img src="https://gitee.com/kzcy/pic/raw/master/img/image-20200827170417361.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Visual Studio Code (vscode) 配置 C / C++ 环境]]></title>
        <id>https://in-clude.github.io/xiaomeiyan/post/visual-studio-code-vscode-pei-zhi-c-c-huan-jing/</id>
        <link href="https://in-clude.github.io/xiaomeiyan/post/visual-studio-code-vscode-pei-zhi-c-c-huan-jing/">
        </link>
        <updated>2021-05-15T14:39:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="开始"><strong>开始</strong></h3>
<ol>
<li>下载VScode</li>
<li>安装cpptools工具</li>
<li>下载MinGW</li>
<li>配置环境变量</li>
<li>使用简单的.cpp文件配置C++环境</li>
<li>运行</li>
</ol>
<h3 id="详细解读"><strong>详细解读</strong>：</h3>
<h4 id="1-下载vscode"><strong>1. 下载VScode</strong></h4>
<p>下载链接：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a><br>
安装过程：一路下一步，安装很简单，安装路径看个人</p>
<h4 id="1-安装cpptools工具"><strong>1. 安装cpptools工具</strong></h4>
<p>打开vscode，按照以下步骤安装</p>
<h4 id="3-下载mingw"><strong>3</strong>. <strong>下载MinGW</strong></h4>
<p>下载地址：<a href="https://sourceforge.net/projects/mingw-w64/files/">https://sourceforge.net/projects/mingw-w64/files/</a></p>
<p>下载的文件：进入网站后不要点击 &quot;Download Lasted Version&quot;，往下滑，找到最新版的 &quot;x86_64-posix-seh&quot;。<br>
安装MinGW：下载后是一个7z的压缩包，解压后移动到你想安装的位置即可。</p>
<h4 id="4-配置环境变量"><strong>4. 配置环境变量</strong></h4>
<p>配置对象：MinGW，所以把你刚刚安装MinGW的路径拷贝一下</p>
<p>配置环境变量：在此以win10为例，到达第6步之后，前面打开的窗口都要按下确定，否则会失败。<br>
【注】：win7需要添加路径，不要覆盖了。万一真的覆盖了，点击取消重来一遍，只要不点确定，啥都好说</p>
<p>配置好环境变量后最好重启一下 VScode</p>
<p>❁❁❁ 验证一下环境变量是否配置成功<br>
按下 win + R，输入cmd，回车键之后输入g++，再回车，如果提示以下信息[1]，则环境变量配置成功。如果提示以下信息[2]，则环境变量配置失败。</p>
<p>[1]：g++: fatal error: no input files<br>
[2]：'g++' 不是内部或外部命令，也不是可运行的程序或批处理文件。</p>
<h4 id="5-使用简单的cpp文件配置c环境"><strong>5. 使用简单的.cpp文件配置C++环境</strong></h4>
<p>（1）新建空文件夹Code<br>
（2）打开VScode --&gt; 打开文件夹 --&gt; 选择刚刚创建的文件夹Code<br>
（3）新建test.cpp文件(以最简单的 HelloWorld.cpp 为例)</p>
<p>复制代码</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
int main()
{
   printf(&quot;Hello World\n&quot;);
   system(&quot;pause&quot;);
   return 0;
}
</code></pre>
<p>(4)进入调试界面添加配置环境，选择 C++(GDB/LLDB)，再选择 g++.exe，之后会自动生成 launch.json 配置文件<br>
(5)编辑 launch.json 配置文件</p>
<p>复制代码</p>
<pre><code> 1 {
 2     &quot;version&quot;: &quot;0.2.0&quot;,
 3     &quot;configurations&quot;: [
 4         {
 5             &quot;name&quot;: &quot;g++.exe build and debug active file&quot;,
 6             &quot;type&quot;: &quot;cppdbg&quot;,
 7             &quot;request&quot;: &quot;launch&quot;,
 8             &quot;program&quot;: &quot;${fileDirname}\\${fileBasenameNoExtension}.exe&quot;,
 9             &quot;args&quot;: [],
10             &quot;stopAtEntry&quot;: false,
11             &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,
12             &quot;environment&quot;: [],
13             &quot;externalConsole&quot;: true,      //修改此项，让其弹出终端
14             &quot;MIMode&quot;: &quot;gdb&quot;,
15             &quot;miDebuggerPath&quot;: &quot;D:\\2Software\\mingw64\\bin\\gdb.exe&quot;,
16             &quot;setupCommands&quot;: [
17                 {
18                     &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,
19                     &quot;text&quot;: &quot;-enable-pretty-printing&quot;,
20                     &quot;ignoreFailures&quot;: true
21                 }
22             ],
23             &quot;preLaunchTask&quot;: &quot;task g++&quot; //修改此项
24         }
25     ]
26 }
</code></pre>
<p>(6)返回.cpp文件，按F5进行调试，会弹出找不到任务&quot;task g++&quot;，选择 &quot;配置任务&quot;，会自动生成 tasks.json 文件<br>
(7)编辑 tasks.json 文件</p>
<p>复制代码</p>
<pre><code> 1 {
 2     &quot;version&quot;: &quot;2.0.0&quot;,
 3     &quot;tasks&quot;: [
 4         {
 5             &quot;type&quot;: &quot;shell&quot;,
 6             &quot;label&quot;: &quot;task g++&quot;,    //修改此项
 7             &quot;command&quot;: &quot;D:\\2Software\\mingw64\\bin\\g++.exe&quot;,
 8             &quot;args&quot;: [
 9                 &quot;-g&quot;,
10                 &quot;${file}&quot;,
11                 &quot;-o&quot;,
12                 &quot;${fileDirname}\\${fileBasenameNoExtension}.exe&quot;
13             ],
14             &quot;options&quot;: {
15                 &quot;cwd&quot;: &quot;D:\\2Software\\mingw64\\bin&quot;
16             },
17             &quot;problemMatcher&quot;: [
18                 &quot;$gcc&quot;
19             ],
20             &quot;group&quot;: &quot;build&quot;
21         }
22     ]
23 }
</code></pre>
<p>【注】： launch.json 文件中 &quot;preLaunchTask&quot; 的值 必须与 tasks.json 文件中 &quot;label&quot;的值一致。值的设置看个人喜好，保持默认也是OK的。</p>
<h4 id="6-运行"><strong>6. 运行</strong></h4>
<p>返回 HelloWorld.cpp 文件，按F5调试，发现完全OK了！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://in-clude.github.io/xiaomeiyan/post/about/</id>
        <link href="https://in-clude.github.io/xiaomeiyan/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站这不重要">🏠 关于本站：这不重要</h2>
<h2 id="博主是谁这也不重要">👨‍💻 博主是谁：这也不重要</h2>
<h2 id="兴趣爱好-acgn-acgn-acgn">⛹ 兴趣爱好： ACGN ACGN ACGN</h2>
<h2 id="联系我呀httpsspacebilibilicom12045458">📬 联系我呀：<a href="https://space.bilibili.com/12045458">https://space.bilibili.com/12045458</a></h2>
<figure data-type="image" tabindex="1"><img src="https://in-clude.github.io/xiaomeiyan//post-images/1623642528220.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>